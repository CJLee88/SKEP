<!-- views/edit.ejs -->
<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
  <title><%= text.edit %></title>
  <link rel="stylesheet" href="/css/header.css">
  <link rel="stylesheet" href="/css/style.css">
  <!-- Quill CSS CDN (1.3.6 사용) -->
  <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
    }
    .form-container {
      max-width: 800px;
      margin: 0 auto;
    }
    h1 {
      text-align: center;
      margin-bottom: 20px;
    }
    label {
      display: block;
      margin-bottom: 8px;
      font-weight: bold;
    }
    input[type="text"],
    select {
      width: 100%;
      padding: 8px;
      margin-top: 4px;
      margin-bottom: 12px;
      box-sizing: border-box;
    }
    #editor-container {
      height: 200px;
      background: #fff;
      margin-bottom: 12px;
    }
    button {
      padding: 8px 16px;
      background-color: #007BFF;
      color: #fff;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
    button:hover {
      background-color: #0056b3;
    }
    .image-preview {
      margin-top: 10px;
    }
  </style>
</head>
<body>
  <%- include('partials/header') %>
  <div class="form-container">
    <h1><%= text.edit %></h1>
    <form id="edit-form" method="POST" action="/admin/edit/<%= article.id %>?lang=<%= lang %>" enctype="multipart/form-data" novalidate>
      <label>제목:
        <input type="text" name="title" value="<%= article.title %>" required>
      </label>
      <label><%= text.category %>:
        <select name="category" required>
          <option value="국제교육" <%= article.category === '국제교육' ? 'selected' : '' %>>국제교육</option>
          <option value="한국유학" <%= article.category === '한국유학' ? 'selected' : '' %>>한국유학</option>
          <option value="다문화" <%= article.category === '다문화' ? 'selected' : '' %>>다문화</option>
          <option value="인터뷰" <%= article.category === '인터뷰' ? 'selected' : '' %>>인터뷰</option>
        </select>
      </label>
      
      <!-- Quill 에디터 영역: 기존 내용을 unescaped 방식으로 로드 -->
      <div id="editor-container" style="height: 200px; background: #fff;">
        <%- article.content %>
      </div>
      <!-- 편집기 내용 전송용 hidden input -->
      <input type="hidden" id="content" name="content">
      
      <!-- 기존 이미지 미리보기 및 현재 이미지 값 -->
      <% if (article.image) { %>
        <div class="image-preview">
          <img src="<%= article.image %>" alt="현재 이미지" width="200">
        </div>
      <% } %>
      <input type="hidden" name="currentImage" value="<%= article.image %>">
      <label>이미지 수정:
        <input type="file" id="editImageInput" name="image" accept="image/*">
      </label>
      <!-- 새 이미지 미리보기 영역 -->
      <div id="editPreviewHolder" style="display: none;"></div>
      
      <button type="submit"><%= text.edit %></button>
    </form>
    <hr>
    <a href="/admin/dashboard?lang=<%= lang %>">← <%= text.article_list %></a>
  </div>
  
  <!-- Quill JS CDN (1.3.6 사용) -->
  <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
  <script>
    // 대시보드와 동일한 toolbar 옵션 사용
    var toolbarOptions = [
      [{ 'header': [1, 2, false] }],
      ['bold', 'italic', 'underline', 'strike'],
      [{ 'color': [] }, { 'background': [] }],
      ['link', 'image'],
      [{ 'align': [] }],
      ['clean']
    ];
    var quill = new Quill('#editor-container', {
      modules: { toolbar: toolbarOptions },
      theme: 'snow'
    });
    
    // 폼 제출 시 Quill 에디터의 내용을 hidden input에 저장
    document.getElementById("edit-form").onsubmit = function() {
      document.getElementById("content").value = quill.root.innerHTML;
      return true;
    };
    
    // 이미지 업로드 미리보기 구현 (edit 페이지)
    const editImageInput = document.getElementById('editImageInput');
    const editPreviewHolder = document.getElementById('editPreviewHolder');
    
    editImageInput.addEventListener('change', function(event) {
      editPreviewHolder.innerHTML = "";
      const file = event.target.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
          const img = document.createElement('img');
          img.src = e.target.result;
          img.style.maxWidth = "200px";
          img.style.marginTop = "10px";
          editPreviewHolder.style.display = 'block';
          editPreviewHolder.appendChild(img);
        };
        reader.readAsDataURL(file);
      } else {
        editPreviewHolder.style.display = 'none';
      }
    });
  </script>
</body>
</html>
